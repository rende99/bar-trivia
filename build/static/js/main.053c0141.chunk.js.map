{"version":3,"sources":["Home.js","components/questionbox.jsx","HostPub.js","JoinPub.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","state","data","className","to","theme","id","Component","JoinPub","Q","A","console","log","this","indx","event","setState","target","value","onQChange","round","question","onAChange","type","defaultValue","defaultQ","onChange","QChange","bind","defaultA","AChange","HostPub","numRounds","numPerRound","rows","Qarray","Aarray","modalOpen","templatesToDisplay","Array","createQuestionBoxes","getAllTemplates","difference","tempQ","tempA","length","newNumPerRound","newQ","r","q","temp","newA","i","push","key","Math","floor","updateQ","updateA","exportObj","questions","exportToJsonFile","jsonData","dataStr","JSON","stringify","dataUri","encodeURIComponent","linkElement","document","createElement","setAttribute","click","fileReader","FileReader","readAsText","files","jsonObj","onload","e","result","parse","tempQArray","tempAArray","a","fetch","method","then","response","json","_id","toggleModal","style","margin","onClick","exportQuestions","name","accept","importQuestions","open","toggle","size","sort","b","timesUsed","map","obj","index","templateSelected","sm","md","lg","uploadQuestions","numRoundChange","numPerRoundChange","pathname","isHost","code","String","random","substr","submitClick","placeholder","codeChanged","nameChanged","socket","socketIOClient","Game","undefined","location","gameCode","currWorkingAnswer","myID","scoringArray","game","scoreChange","beginThrow","emit","on","t","off","object","toast","error","thrower","dark","warning","playerIndex","connectedPlayers","findIndex","item","guesses","currRound","settings","currQuestion","playerID","guess","newScore","options","selectedIndex","tempGame","score","nextQuestion","autoClose","pauseOnFocusLoss","newestOnTop","beginGame","disabled","playerGuessChange","submitQuestion","player","i2","confirmScores","reduce","prev","current","objectsThrown","tomatoes","boulders","eggs","max","seedrandom","App","exact","path","component","withRouter","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.053c0141.chunk.js","sourcesContent":["import React, {Component, useEffect, useState} from 'react';\nimport { Button } from \"shards-react\";\nimport { Link, Redirect} from \"react-router-dom\";\nimport './Home.css'\n\n\nclass Home extends Component {\n    constructor(props) {\n        super(props)\n\t\tthis.state ={\n            data: null,\n        }\n    }\n    \n    async componentDidMount() {\n\n    }\n\n    render(){\n        return (\n            <div className=\"God\">\n                <h1 className=\"siteTitle\">Pub Trivia Online</h1>\n                <div className=\"choices\">\n                    <Link to='/hostPub'>\n                        <Button theme=\"dark\">Host Pub Trivia</Button>\n                    </Link>\n                    <h3 id=\"or\"><b>or</b></h3>\n                    <Link to='/joinPub'>\n                        <Button theme=\"light\">Join Pub Trivia</Button>\n                    </Link>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, {Component, useEffect, useState} from 'react';\nimport { Form, FormGroup, FormInput, Button, InputGroup, InputGroupAddon, InputGroupText, Card  } from \"shards-react\";\nimport socketIOClient from \"socket.io-client\";\nimport './questionbox.css'\n\nconst ENDPOINT = \"http://127.0.0.1:3001\";\nclass JoinPub extends Component {\n    constructor(props) {\n        super(props)\n\t\tthis.state ={\n            data: null,\n            Q: \"\",\n            A: \"\",\n        }\n    }\n    \n    async componentDidMount() {\n       console.log(this.props.indx)\n    }\n    QChange(event){\n        console.log(\"Q changing\")\n        this.setState( {Q: event.target.value}, () => {\n            this.props.onQChange(this.state.Q, this.props.round, this.props.question)\n        } )\n    }\n    AChange(event){\n        console.log(\"A changing\")\n        this.setState( {A: event.target.value}, () => {\n            this.props.onAChange(this.state.A, this.props.round, this.props.question)\n        } )\n    }\n\n    render(){\n        return (\n            <div>\n                {this.props.question == 1 && this.props.round != 1 &&\n                    <hr className=\"lineBreak\" />\n                }\n                <FormGroup className=\"entireParent\">\n                    <h5>Round {this.props.round} Question {this.props.question}</h5>\n                    <div className=\"formDiv\">\n                        <InputGroup className=\"QAGroup\">\n                            <InputGroupAddon type=\"prepend\">\n                                <InputGroupText>Q: </InputGroupText>\n                            </InputGroupAddon>\n                            <FormInput defaultValue={this.props.defaultQ} onChange={this.QChange.bind(this)}/>\n                        </InputGroup>\n                        <InputGroup className=\"QAGroup\">\n                            <InputGroupAddon type=\"prepend\">\n                                <InputGroupText>A: </InputGroupText>\n                            </InputGroupAddon>\n                            <FormInput defaultValue={this.props.defaultA} onChange={this.AChange.bind(this)}/>\n                        </InputGroup>\n                    </div>\n\n                </FormGroup>\n            </div> \n        );\n    }\n}\n\nexport default JoinPub;","import React, {Component, useEffect, useState} from 'react';\nimport { Form, FormGroup, FormInput, FormSelect, Button, ButtonGroup, Modal, ModalHeader, ModalBody, Card, CardBody, CardTitle, CardSubtitle, Container, Row, Col} from \"shards-react\";\nimport { Link, Redirect} from \"react-router-dom\";\nimport QuestionBox from './components/questionbox'\nimport './HostPub.css'\n\n\nclass HostPub extends Component {\n    constructor(props) {\n        super(props)\n\t\tthis.state ={\n            data: null,\n            numRounds: 5,\n            numPerRound: 8,\n            rows: [],\n            Qarray: [],\n            Aarray: [],\n            modalOpen: false,\n            templatesToDisplay: []\n        }\n    }\n    \n    componentDidMount() {\n        this.setState( {Qarray: Array(this.state.numRounds*this.state.numPerRound)} )\n        this.setState( {Aarray: Array(this.state.numRounds*this.state.numPerRound)} )\n        this.createQuestionBoxes()\n        this.getAllTemplates()\n        console.log(this.state.rows)\n\n    }\n\n    numRoundChange(event){ \n        var difference = (event.target.value - this.state.numRounds) * this.state.numPerRound //positive for more questions, negative for less questions\n        this.setState( {numRounds: event.target.value}, () => {\n            this.createQuestionBoxes()\n            var tempQ = this.state.Qarray\n            var tempA = this.state.Aarray\n            tempQ.length += difference\n            tempA.length += difference\n            this.setState( {Qarray: tempQ} )\n            this.setState( {Aarray: tempA} )\n        }) \n    }\n    numPerRoundChange(event){ \n        var newNumPerRound = event.target.value\n        var difference = (newNumPerRound - this.state.numPerRound) * this.state.numRounds //positive for more questions, negative for less questions\n        var prevNumPerRound = this.state.numPerRound\n        this.setState( {numPerRound: newNumPerRound}, () => {\n            this.createQuestionBoxes()\n            var tempQ = this.state.Qarray\n            var tempA = this.state.Aarray\n            /*\n            //we have to deal with this change a bit differently, and add new questions at the end of each round (or remove questions from the end of each round).\n            var numSpliced = 0\n            for(var i = 0; i < this.state.numRounds; i++){\n                // i represents each round number\n                if(difference > 0){\n                    for(var j = prevNumPerRound; j < newNumPerRound; j++){\n                        // go from the end of each round to the new end of each round\n                        tempQ.splice((i*prevNumPerRound) + j + numSpliced, 0, \"\")\n                        tempA.splice((i*prevNumPerRound) + j + numSpliced, 0, \"\")\n                        numSpliced++; // because we are changing the array as we iterate.\n                    }\n\n                }else{\n                    // go from the end of each round to the new end of each round\n                    tempQ.splice(i*prevNumPerRound + newNumPerRound - numSpliced, -1*difference, \"\")\n                    tempA.splice(i*prevNumPerRound + newNumPerRound - numSpliced, -1*difference, \"\")\n                    numSpliced += (-1*difference); // because we are changing the array as we iterate.\n                }\n            }\n            */\n            tempQ.length += difference\n            tempA.length += difference\n            this.setState( {Qarray: tempQ} )\n            this.setState( {Aarray: tempA} )\n\n\n        }) \n    }\n\n    updateQ(newQ, r, q){\n        console.log(\"before: \" + this.state.Qarray)\n        var temp = this.state.Qarray;\n        temp[((r-1)*this.state.numPerRound)+q-1] = newQ\n        this.setState( {Qarray: temp}, () => {\n            console.log(\"after: \" + this.state.Qarray)\n\n        } )\n    }\n    updateA(newA, r, q){\n        console.log(\"before: \" + this.state.Aarray)\n        var temp = this.state.Aarray;\n        temp[((r-1)*this.state.numPerRound)+q-1] = newA\n        this.setState( {Aarray: temp}, () => {\n            console.log(\"after: \" + this.state.Aarray)\n\n        } )\n    }\n\n    createQuestionBoxes(){\n        var rows = []\n        for(var i = 0; i < this.state.numRounds * this.state.numPerRound; i++){\n            rows.push(<QuestionBox \n                    key={i}\n                    round={Math.floor(i / this.state.numPerRound) + 1} \n                    question={i % this.state.numPerRound + 1} \n                    defaultQ={this.state.Qarray[i]} \n                    defaultA={this.state.Aarray[i]} \n                    onQChange={this.updateQ.bind(this)} \n                    onAChange={this.updateA.bind(this)}\n                />)\n        }\n        this.setState( {rows: rows}, () => {\n            return rows\n        } )\n    }\n\n    exportQuestions(){\n        console.log(\"exporting...\")\n        console.log(this.state.rows[0])\n        var exportObj = {\n            'numRounds': this.state.numRounds,\n            'numPerRound': this.state.numPerRound,\n            'questions': [\n\n            ]\n        }\n        for(var i = 0; i < this.state.Qarray.length; i++){\n            exportObj.questions[i] = {\n                'Q': this.state.Qarray[i],\n                'A': this.state.Aarray[i]\n            }\n        }\n        console.log(exportObj)\n        this.exportToJsonFile(exportObj)\n    }\n\n    exportToJsonFile(jsonData) {\n        let dataStr = JSON.stringify(jsonData);\n        let dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\n    \n        let exportFileDefaultName = 'pubQuestions.json';\n    \n        let linkElement = document.createElement('a');\n        linkElement.setAttribute('href', dataUri);\n        linkElement.setAttribute('download', exportFileDefaultName);\n        linkElement.click();\n    }\n\n    importQuestions(event){\n        console.log(\"importing...\")\n        var fileReader = new FileReader()\n        fileReader.readAsText(event.target.files[0])\n        var jsonObj = {}\n        fileReader.onload = (e) => {\n            // The file's text will be printed here\n            console.log(e.target.result)\n            jsonObj = JSON.parse(e.target.result)\n            console.log(jsonObj)\n            this.setState( {numRounds: jsonObj.numRounds} )\n            this.setState( {numPerRound: jsonObj.numPerRound} )\n            var tempQArray = []\n            var tempAArray = []\n            console.log(jsonObj)\n            for(var i = 0; i < jsonObj.questions.length; i++){\n                tempQArray[i] = jsonObj.questions[i].Q\n                tempAArray[i] = jsonObj.questions[i].A\n            }\n            this.setState( {Qarray: tempQArray} )  \n            this.setState( {Aarray: tempAArray} ) \n            this.createQuestionBoxes()\n        };\n    }\n\n    uploadQuestions(event){\n        console.log(\"uploading...\")\n        var fileReader = new FileReader()\n        fileReader.readAsText(event.target.files[0])\n        var jsonObj = {}\n        fileReader.onload = async (e) => {\n            // The file's text will be printed here\n            console.log(e.target.result)\n            jsonObj = JSON.parse(e.target.result)\n            console.log(jsonObj)\n            const response = await fetch('newTemplate/'+JSON.stringify(jsonObj), {\n                method: 'GET'\n            }).then(async response => {\n                // Just close the modal once the file is done uploading to the DB.\n                this.setState( {modalOpen: false} )                \n            })\n\n\n        };\n    }\n\n    submitClick(){\n        console.log(this.state.Qarray, this.state.Aarray)\n    }\n\n    toggleModal(){\n        this.setState( {modalOpen: !this.state.modalOpen})\n    }\n\n    async getAllTemplates(){\n        // this method is run when the modal is open.\n        console.log(\"getting ALL templates\")\n        const response = await fetch('/getAllTemplates', {\n            method: 'GET'\n        }).then(async response => {\n            console.log(response)\n            const json = await response.json();\n            console.log(json.data)\n            this.setState( {templatesToDisplay: json.data} )\n            return json.data\n        })\n    }\n\n    async templateSelected(event, id){\n        console.log(\"HERE: \", id)\n        const response = await fetch('getTemplate/'+id, {\n            method: 'GET'\n        }).then(async response => {\n            console.log(response)\n            const json = await response.json();\n            console.log(json.data)\n            \n            this.setState( {numRounds: json.data.numRounds} )\n            this.setState( {numPerRound: json.data.numPerRound} )\n            var tempQArray = []\n            var tempAArray = []\n            for(var i = 0; i < json.data.questions.length; i++){\n                tempQArray[i] = json.data.questions[i].Q\n                tempAArray[i] = json.data.questions[i].A\n            }\n            this.setState( {Qarray: tempQArray} )  \n            this.setState( {Aarray: tempAArray} ) \n            this.createQuestionBoxes()\n            await fetch('usingTemplate/'+json.data._id, {\n                method: 'GET'\n            })\n            this.toggleModal()\n        })\n    }\n\n    render(){\n        return (\n            <div>\n                <h2 style={{margin: \"50px\"}}>Create a new Game</h2>\n                <ButtonGroup>\n                    <Button theme=\"light\" onClick={this.exportQuestions.bind(this)}>Export questions</Button>\n                    <Button type=\"file\" name=\"file\" theme=\"light\">Import questions\n                        <input type=\"file\" name=\"file\" accept=\".json\" onChange={this.importQuestions.bind(this)}/>\n                    </Button>\n                </ButtonGroup>  \n                <div className=\"buttonDiv\">\n                    <Button theme=\"info\" onClick={this.toggleModal.bind(this)}>Browse Pre-made Games</Button> \n                </div>\n                <Modal open={this.state.modalOpen} toggle={this.toggleModal.bind(this)} size=\"lg\">\n                    <ModalHeader>Public Game Templates</ModalHeader>\n                    {this.state.modalOpen &&\n                        <>\n                            {this.state.templatesToDisplay.sort((a, b) => (a.timesUsed > b.timesUsed) ? -1 : 1).map((obj, index) => {\n                                return (\n                                    <Card className=\"templateCard\" onClick={(event) => this.templateSelected(event, obj._id)}>\n                                        <CardBody>\n                                            <Container>\n                                                <Row>\n                                                    <Col sm=\"12\" md=\"4\" lg=\"10\" className=\"colL\">\n                                                        <CardTitle>{obj.name}</CardTitle>\n                                                        <CardSubtitle>Rounds: {obj.numRounds} | Questions per Round: {obj.numPerRound}</CardSubtitle>\n                                                    </Col>\n                                                    <Col sm=\"12\" md=\"4\" lg=\"2\" className=\"colR\">\n                                                        <p className=\"cardP\">used</p> \n                                                        <h3 className=\"timesUsedClass\">{obj.timesUsed}</h3>\n                                                        <p className=\"cardP\">times</p>\n                                                    </Col>\n                                                </Row>\n                                            </Container>\n                                        </CardBody>\n                                    </Card>\n                                )\n                            })}\n                        </>\n                    }\n                    <ModalBody>Upload your own game template below!</ModalBody>\n                    <div className=\"uploadButtonWrapper\">\n                        <Button className=\"uploadButton\" theme=\"info\">Upload a game template\n                            <input type=\"file\" name=\"file\" accept=\".json\" onChange={this.uploadQuestions.bind(this)}/>\n                        </Button> \n                    </div>\n                    \n                </Modal>\n\n                <Form style={{margin: \"30px 0px 0px 0px\"}}>\n                    <div className=\"inputGroup\">\n                        <h5>How many rounds?</h5>\n                        <FormSelect onChange={this.numRoundChange.bind(this)} value={this.state.numRounds} style={{\"maxWidth\": \"500px\"}}>\n                            <option value=\"1\">1</option>\n                            <option value=\"2\">2</option>\n                            <option value=\"3\">3</option>\n                            <option value=\"4\">4</option>\n                            <option value=\"5\">5</option>\n                            <option value=\"6\">6</option>\n                            <option value=\"7\">7</option>\n                            <option value=\"8\">8</option>\n                            <option value=\"9\">9</option>\n                            <option value=\"10\">10</option>\n                        </FormSelect>\n                    </div>\n                    <div className=\"inputGroup\">\n                        <h5>How many questions per round?</h5>\n                        <FormSelect onChange={this.numPerRoundChange.bind(this)} value={this.state.numPerRound} style={{\"maxWidth\": \"500px\"}}>\n                            <option value=\"1\">1</option>\n                            <option value=\"2\">2</option>\n                            <option value=\"3\">3</option>\n                            <option value=\"4\">4</option>\n                            <option value=\"5\">5</option>\n                            <option value=\"6\">6</option>\n                            <option value=\"7\">7</option>\n                            <option value=\"8\">8</option>\n                            <option value=\"9\">9</option>\n                            <option value=\"10\">10</option>\n                        </FormSelect>\n                    </div>\n \n                    {this.state.rows}\n                    \n                    <Link to={{\n                        pathname: '/play',\n                        data: {\n                            isHost: true,\n                            code: String(Math.floor((Math.random() + 1) * 1000000)).substr(1),\n                            name: \"Host\",\n                            numRounds: this.state.numRounds,\n                            numPerRound: this.state.numPerRound,\n                            Qarray: this.state.Qarray,\n                            Aarray: this.state.Aarray\n                        }}}>\n                        <Button className=\"startGameBtn\" theme=\"dark\" onClick={this.submitClick.bind(this)}>Submit and start game</Button>\n                    </Link>\n\n\n                </Form>\n            </div>\n \n        );\n    }\n}\n\nexport default HostPub;","import React, {Component, useEffect, useState} from 'react';\nimport { Form, FormGroup, FormInput, Button } from \"shards-react\";\nimport { Link, Redirect} from \"react-router-dom\";\nimport socketIOClient from \"socket.io-client\";\nimport './joinPub.css'\n\nconst ENDPOINT = \"http://127.0.0.1:3001\";\nclass JoinPub extends Component {\n    constructor(props) {\n        super(props)\n\t\tthis.state ={\n            data: null,\n            code: 0,\n            name: \"\"\n        }\n    }\n    \n    async componentDidMount() {\n\n    }\n\n    codeChanged(event){\n        this.setState( {code: event.target.value} )\n    }\n    nameChanged(event){\n        this.setState( {name: event.target.value} )\n\n    }\n\n    submitClick(){\n\n    }\n\n    render(){\n        return (\n            <div className=\"God\">\n                <h1>Join Pub</h1>\n                <Form>\n                    <FormGroup>\n                        <div className=\"joinInputGroup\">\n                            <h5>Enter Pub Code</h5>\n                            <FormInput placeholder=\"ex: 215688\" onChange={this.codeChanged.bind(this)} style={{\"max-width\": \"500px\"}}/>\n                        </div>\n                        <div className=\"joinInputGroup\">\n                            <h5>Enter Nickname</h5>\n                            <FormInput placeholder=\"John\" onChange={this.nameChanged.bind(this)} style={{\"max-width\": \"500px\"}}/>\n                        </div>\n\n                        <Link to={{\n                        pathname: '/play',\n                        data: {\n                            isHost: false,\n                            code: this.state.code,\n                            name: this.state.name\n                        }}}>\n                            <Button theme=\"light\">Search</Button>\n                        </Link>\n                    </FormGroup>\n                </Form>\n\n\n            </div>\n        );\n    }\n}\n\nexport default JoinPub;","import React, {Component, useEffect, useState, useRef} from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { FormSelect, Button, FormTextarea, Progress, Card, CardBody, CardTitle, CardFooter, CardSubtitle, CardDeck} from \"shards-react\";\nimport { Link, Redirect} from \"react-router-dom\";\nimport socketIOClient from \"socket.io-client\";\nimport './Game.css'\nconst ENDPOINT = \"http://127.0.0.1:3001\";\nconst socket = socketIOClient(ENDPOINT);\n\nclass Game extends Component {\n    constructor(props) {\n        super(props)\n\t\tthis.state ={\n            data: null,\n            isHost: this.props.location.data != undefined ? this.props.location.data.isHost : true,\n            gameCode: this.props.location.data != undefined ? this.props.location.data.code : -1,\n            name: this.props.location.data != undefined ? this.props.location.data.name : \"random name\",\n            currWorkingAnswer: \"\",\n            myID: \"\",\n            scoringArray: [],\n            game: null\n        }\n        this.scoreChange.bind(this)\n        this.beginThrow.bind(this)\n    }\n    \n    componentDidMount() {\n        //register lobby code with backend, essentially open up a room with that code if host. if joining, join.\n        if(this.state.isHost){\n            socket.emit(\"makeGame\", {\n                code: this.state.gameCode,\n                numRounds: this.props.location.data != undefined ? this.props.location.data.numRounds : 0, \n                numPerRound: this.props.location.data != undefined ? this.props.location.data.numPerRound : 0,\n                Qarray: this.props.location.data != undefined ? this.props.location.data.Qarray : [],\n                Aarray: this.props.location.data != undefined ? this.props.location.data.Aarray : []\n            })\n            socket.on(\"gameCreated\", function (response){\n                console.log(\"game ready\")\n            })\n        }else{\n        }\n        socket.emit(\"joinGame\", {name: this.state.name, code: this.state.gameCode})\n        socket.on(\"gameJoined\", (response) => {\n            console.log(response)\n            var t = this.state.myID == \"\" ? response.myID : this.state.myID\n            this.setState( {game: response.game, myID: t } )\n        })\n\n        socket.on(\"gameStarted\", (response) => {\n            this.setState( {game: response.game} )\n            console.log(response.game)\n        })\n\n        socket.on(\"questionSubmitted\", response => {\n            this.setState( {game: response.game} )\n            console.log(response.game)\n        })\n\n        socket.on(\"movedToNextQuestion\", (response) => {\n            this.setState( {game: response.game} )\n            console.log(response.game)\n        })\n\n        socket.on(\"scoresSubmitted\", response => {\n            this.setState( {game: response.game} )\n            console.log(response.game)\n        })\n\n        socket.off(\"throwFinished\").on(\"throwFinished\", response => {\n            if(this.state.isHost){\n                switch (response.object) {\n                    case \"tomato\":\n                        toast.error(`${response.thrower} threw a tomato at you!`)\n                        break;\n                    case \"boulder\":\n                        toast.dark(`${response.thrower} threw a boulder at you!`)\n                        break;\n                    case \"egg\":\n                        toast.warning(`${response.thrower} threw an egg at you!`)\n                        break;\n                    default:\n                        toast(`${response.thrower} threw something at you!`)\n                        break;\n                }\n            }\n            this.setState( {game: response.game} )\n        })\n\n    }\n\n    beginThrow(object){\n        socket.emit(\"throw\", {code: this.state.gameCode, name: this.state.name, object: object})\n    }\n\n    beginGame(){\n        console.log(\"game beginning!\")\n        socket.emit(\"startGame\", {code: this.state.gameCode})\n    }\n\n    nextQuestion(){\n        socket.emit(\"nextQuestion\", {code: this.state.gameCode})\n    }\n\n    playerGuessChange(event){ this.setState( {currWorkingAnswer: event.target.value} ) }\n\n    submitQuestion(e){\n        const playerIndex = this.state.game.connectedPlayers.findIndex(item => item.id == this.state.myID);\n        if(this.state.game.connectedPlayers[playerIndex].guesses[(this.state.game.state.currRound-1) * this.state.game.settings.numPerRound + this.state.game.state.currQuestion - 1] == null){\n            console.log(\"submitting question from player with id \", this.state.myID)\n            socket.emit(\"submitQuestion\", {code: this.state.gameCode, playerID: this.state.myID, guess: this.state.currWorkingAnswer})\n        }else{\n            console.log(\"already submitted a question...\")\n        }\n    }\n\n    scoreChange(event, id){\n        // WORK ON SETTING GAME STATE HERE TO UPDATE EACH PLAYERS SCORE, THEN EMITTING TO SAVE CHANGES TO SOCKET WHEN BUTTON PRESSED!\n        var newScore = event.target.options.selectedIndex\n        var playerIndex = this.state.game.connectedPlayers.findIndex(item => item.id == id);\n\n        var tempGame = this.state.game\n\n        tempGame.connectedPlayers[playerIndex].score += (newScore == 1 ? 1 : -1)\n        this.setState( {game: tempGame} )\n        console.log(tempGame, playerIndex)\n    }\n\n    confirmScores(){\n        socket.emit(\"submitScores\", {code: this.state.gameCode, game: this.state.game})\n        this.nextQuestion()\n    }\n\n    render(){\n        console.log(this.state.game)\n        return (\n            <div>\n                {this.state.isHost && <ToastContainer autoClose={3000} pauseOnFocusLoss={false} newestOnTop={false}/>}\n                {this.state.gameCode == -1 && <Redirect to=\"/\" />}\n                {this.state.game != null &&\n                    <>\n                        <h3 className=\"nameClass\">{this.state.name}</h3>\n                        <h3 className=\"codeClass\">Room Code: <h1>{this.state.gameCode}</h1></h3>\n\n                        {this.state.game.state.currRound == 1 && this.state.game.state.currQuestion == 0 && \n                        // LOBBY; START OF GAME\n                            <>\n                                <h4>Game Settings:</h4>\n                                <h6>Rounds: {this.state.game.settings.numRounds} | Questions Per Round: {this.state.game.settings.numPerRound}</h6>\n                                <h4>Players in lobby:</h4>\n                                {this.state.game.connectedPlayers.map((item, index) => (\n                                    <div>\n                                        <p>{item.name}</p>\n                                    </div>\n                                ))}\n                                {this.state.isHost &&\n                                    <>\n                                        <Button \n                                            theme=\"dark\" \n                                            onClick={this.beginGame.bind(this)}\n                                            disabled={this.state.game.connectedPlayers.length <= 1}>\n                                        Begin Game with these players\n                                        </Button>\n                                    </>\n\n                                }\n                            </>\n                        }\n                        {this.state.game.state.currQuestion != 0 && this.state.game.state.currRound != 0 &&\n                            <>\n                                <h1 className=\"topText\">Round {this.state.game.state.currRound} Question {this.state.game.state.currQuestion}:</h1>\n                                <h4>{this.state.game.settings.Qarray[(this.state.game.state.currRound-1) * this.state.game.settings.numPerRound + this.state.game.state.currQuestion - 1]}</h4>\n                                {this.state.isHost &&\n                                    <Button style={{margin: \"20px\"}} theme=\"dark\" onClick={this.nextQuestion.bind(this)}>Next</Button>\n                                }\n                                {!this.state.isHost &&\n                                    <div style={{margin: \"0px 40px 0px 40px\"}}>\n                                        <FormTextarea onChange={this.playerGuessChange.bind(this)} />\n                                        <Button theme=\"light\" onClick={this.submitQuestion.bind(this)} style={{margin: \"30px\"}} >Submit Answer</Button>\n                                    </div>\n                                }\n                                {this.state.game.connectedPlayers.map((item, index) => (\n                                    <>\n                                        {item.name != \"Host\" &&\n                                            <p>{item.name}: {item.guesses[(this.state.game.state.currRound-1) * this.state.game.settings.numPerRound + this.state.game.state.currQuestion - 1] != null ? \"answered\" : \"unanswered\"}</p>\n                                        }\n                                    </>\n                                ))\n                                }\n                            </>\n                        }\n                        {this.state.game.state.currRound > 1 && this.state.game.state.currQuestion == 0 && \n                        // END OF ROUND; ANSWER/SCORE REVIEW\n                            <>\n                                <h1 className=\"topText\">Round {this.state.game.state.currRound - 1} Over!</h1>\n                                {this.state.isHost &&\n                                    <>\n                                        {this.state.game.settings.Qarray.map((question, index) => (\n                                            <>\n                                                {index >= (this.state.game.state.currRound - 2)*this.state.game.settings.numPerRound && index < (this.state.game.state.currRound - 1)*this.state.game.settings.numPerRound &&\n                                                    <Card className=\"scoreCard\">\n                                                        <CardBody className=\"cardBody\">\n                                                            <CardTitle>\n                                                                <h2 className=\"cardTitle\">Question {index - (this.state.game.state.currRound - 2)*this.state.game.settings.numPerRound + 1}</h2>\n                                                            </CardTitle>\n                                                            <CardSubtitle>\n                                                                <h4 className=\"cardQ\"><b>Q:</b> {question}</h4>\n                                                                <h4 className=\"cardA\"><b>A:</b> {this.state.game.settings.Aarray[index]}</h4>\n                                                            </CardSubtitle>\n\n                                                            <div className=\"innerPlayerDiv\">\n                                                                {this.state.game.connectedPlayers.map((player, i2) => (\n                                                                    <>\n                                                                        {player.name != \"Host\" &&\n                                                                            <div className=\"responseParent\">\n                                                                                <h2>{player.name}</h2>\n                                                                                <p>\"{player.guesses[index]}\"</p>\n                                                                                <FormSelect onChange={(event) => this.scoreChange(event, player.id)} key={(index-1)*(this.state.game.settings.numPerRound) + i2}>\n                                                                                    <option value=\"0\">0 points</option>\n                                                                                    <option value=\"1\">1 point</option>\n                                                                                </FormSelect>\n                                                                            </div>\n                                                                        }\n                                                                    </>\n                                                                ))}\n                                                            </div>\n                                                        </CardBody>\n                                                    </Card>\n                                                }\n                                            </>\n                                        ))}\n\n                                        <Button theme=\"dark\" onClick={this.confirmScores.bind(this)}>Next Round</Button>\n                                    </>\n                                }\n                                {!this.state.isHost &&\n                                    <>\n                                        <h3>Your answers are being scored... Hang on!</h3>\n                                        <Button theme=\"danger\" onClick={ () => {this.beginThrow(\"tomato\")}} style={{margin: \"30px\"}} >Throw a tomato</Button>\n                                        <Button theme=\"warning\" onClick={ () => {this.beginThrow(\"egg\")}} style={{margin: \"30px\"}} >Throw an egg</Button>\n                                        <Button theme=\"secondary\" onClick={ () => {this.beginThrow(\"boulder\")}} style={{margin: \"30px\"}} >Throw a boulder</Button>\n\n                                    </>\n                                }\n                            </>\n                        }\n                        {this.state.game.state.currRound == 0 && this.state.game.state.currQuestion == 1 && \n                            // END OF GAME\n                            <>\n                                <h2 className=\"topText\">Final Round over!</h2>\n                                <h1 className=\"topText\">🍻<b>{this.state.game.connectedPlayers.reduce((prev, current) => (prev.score > current.score) ? prev : current).name}</b> wins!🍻</h1>\n                                <Card className=\"scoreCard\">\n                                    <h3 className=\"infoCardTitle\">Game Stats:</h3>\n                                    <CardBody className=\"cardContent\">\n                                        <CardTitle className=\"statGroup\">\n                                            <p className=\"gameOverStat\">Tomatoes thrown: <b>{this.state.game.state.objectsThrown.tomatoes}</b></p>\n                                            <p className=\"gameOverStat\">Boulders thrown: <b>{this.state.game.state.objectsThrown.boulders}</b></p>\n                                            <p className=\"gameOverStat\">Eggs thrown: <b>{this.state.game.state.objectsThrown.eggs}</b></p>\n                                        </CardTitle>                                              \n                                    </CardBody>\n                                </Card>\n                            </>\n\n\n                        }\n                        {!(this.state.game.state.currRound == 1 && this.state.game.state.currQuestion == 0) &&\n                        <Card className=\"scoreCard\">\n                            <h3 className=\"infoCardTitle\">Scorecard:</h3>\n                            {this.state.game.connectedPlayers.map((player, index) => (\n                                    <>\n                                        {player.name != \"Host\" &&\n\n                                            <CardBody className=\"cardContent\">\n                                                    <CardTitle className=\"playerTitle\">\n                                                        <p className=\"playerNameScore\"><b>{player.name}</b></p>\n                                                    </CardTitle>\n                                                    \n                                                    <Progress \n                                                        className=\"progressBar\"\n                                                        value={player.score}\n                                                        max={this.state.game.settings.numRounds*this.state.game.settings.numPerRound}\n                                                        theme={[\"primary\",\"secondary\",\"success\",\"warning\",\"danger\",\"info\",\"dark\"][Math.floor((new Math.seedrandom(player.id)())*7)]}>{player.score}\n                                                    </Progress>                                                \n                                            </CardBody>\n\n                                        }\n                                    </>\n                            ))}\n                        </Card>\n                        } \n                        \n                    </>\n                \n                }\n            </div>\n \n        );\n    }\n}\n\nexport default Game;","import React, { Component } from 'react';\nimport { Route, withRouter } from 'react-router-dom';\nimport './App.css';\nimport Home from './Home';\nimport HostPub from './HostPub';\nimport JoinPub from './JoinPub';\nimport Game from './Game';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state ={\n\t\t\tdata: null\n\t\t}\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Route exact path=\"/\" component={Home}/>\n        <Route exact path=\"/hostPub\" component={HostPub}/>\n        <Route exact path=\"/joinPub\" component={JoinPub}/>\n        <Route exact path=\"/play\" component={Game}/>\n\n      </div>\n    );\n  }\n\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" component={ App }/>\n      </Switch>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}